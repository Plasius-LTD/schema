name: CD (Publish to npm)

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write
  id-token: write # for npm provenance (requires Node 18+ and npm >=9)

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install deps (CI)
        run: npm ci

      - name: Build
        run: npm run build --if-present

      - name: Configure & verify npm auth (npmjs)
        env:
            NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
            set -euo pipefail

            # 1) Ensure the secret is actually present (GitHub masks secrets; this only checks non-empty)
            if [ -z "${NPM_TOKEN:-}" ]; then
            echo "ðŸ›‘ NPM_TOKEN is empty or not available to this workflow run." >&2
            echo "   - Confirm repo/org secret 'NPM_TOKEN' exists" >&2
            echo "   - Ensure this run is NOT from a forked PR (secrets blocked)" >&2
            exit 1
            fi

            # 2) Write a clean user-level npmrc for the public npm registry
            echo "registry=https://registry.npmjs.org/" > "$HOME/.npmrc"
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> "$HOME/.npmrc"
            npm config set always-auth true

            echo "Using registry: $(npm config get registry)"

            # 3) Optional sanity: query whoami against the correct registry
            if ! npm whoami --registry https://registry.npmjs.org/ > /dev/null 2>&1; then
            echo "ðŸ›‘ npm whoami failed â€” token invalid or lacks read scope." >&2
            echo "   Recreate a Granular token with Packagesâ†’Publish (Read & Write) for scope @plasius" >&2
            exit 1
            fi
            echo "âœ… npm auth OK for $(npm whoami --registry https://registry.npmjs.org/)"

      - name: Bump version & decide publish flags
        id: pkg
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          NEW_VER=$(npm version patch -m "chore: release v%s [skip ci]")
          echo "New version: $NEW_VER"
          git push --follow-tags

          NAME=$(node -p "require('./package.json').name")
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          if npm view "$NAME" version >/dev/null 2>&1; then
            echo "flags=" >> "$GITHUB_OUTPUT"
          else
            echo "flags=--access public" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish ${{ steps.pkg.outputs.flags }} --provenance
